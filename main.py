import mysql.connector as sql
import telebot
import requests
import json
from telebot import types
from tendo import singleton
from geopy.geocoders import Nominatim as geolocation
from datetime import datetime
from multiprocessing import *
import math
from re import fullmatch as check_re

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–∫–µ–Ω—ã + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î)
from config import *
from functions import *

tmp_time = datetime.now()
print('\n\n')
print(tmp_time.isoformat(), '‚Äì PROGRAMM STARTED!')

connection = sql.connect(
    user = db_config['user'],
    password = db_config['password'],
    unix_socket = db_config['unix_socket'],
    database = db_config['database']
)

db = connection.cursor()
bot = telebot.TeleBot(TOKEN)

main_kb = types.ReplyKeyboardMarkup(True)
main_kb.add(
	types.KeyboardButton('üëî –ß—Ç–æ –Ω–∞–¥–µ—Ç—å?'),
	types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É')
)
main_kb.row(
	types.KeyboardButton('üóÑÔ∏è –ú–æ—è –æ–¥–µ–∂–¥–∞'),
	types.KeyboardButton('üè† –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
)
main_kb.row(
	types.KeyboardButton('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
	types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–µ–∂–¥—É')
)

no_kb = types.ReplyKeyboardRemove()

##################### –ù–ê–ß–ê–õ–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø ########################

def send_success(uuid):
	bot.send_message(uuid, f"–£—Å–ø–µ—à–Ω–æ ‚úÖ", reply_markup = main_kb)
def send_idk(uuid):
	bot.send_message(uuid, f"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢", reply_markup = main_kb)

def get_screen(uuid):
	st = "SELECT screen FROM wb_users WHERE tg_id = %s"
	vals = [uuid]
	db.execute(st, vals)
	db_res = db.fetchall()[0][0]

	if (db_res[0] != '9'):
		res = int(db_res)
	else:
		res = tuple(map(int, db_res.split('_')))

	return res
def check_active(uuid):
	st = "SELECT active FROM wb_users WHERE tg_id = %s"
	vals = [uuid]
	db.execute(st, vals)
	active = db.fetchall()[0][0]

	if (active == 0):
		bot.send_message(uuid, "‚ö† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /activate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", reply_markup = no_kb)
		return False
	return True
def send_weather(uuid):
	if check_active(uuid):
		if get_screen(uuid) == 0:
			st = "SELECT lat, lon FROM wb_users WHERE tg_id = %s"
			vals = [uuid]
			db.execute(st, vals)

			data = db.fetchall()[0]
			lat = data[0]
			lon = data[1]

			message = generate_message(lat, lon, db, uuid)
			
			bot.send_message(uuid, message, parse_mode='html', reply_markup = main_kb)
		else:
			send_idk(uuid)


def send_schedule():
	now = datetime.now()

	days_of_week = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']

	h, m, d = now.hour, now.minute, days_of_week[now.weekday()]	
	st = 'SELECT user FROM `wb_schedule` WHERE `time` = "%s:%s:00" AND ' + d + ' = 1'

	vals = [h, m]
	db.execute(st, vals)

	db_res = db.fetchall()

	for item in db_res:
		st = "SELECT active FROM wb_users WHERE tg_id = %s"
		vals = [item[0]]
		db.execute(st, vals)
		active = db.fetchall()[0][0]
		if (active == 1):
			send_weather(item[0])
			print(tmp_time.isoformat(), '‚Äì sended to user ' + str(item[0]))

p = Process(target=send_schedule)
p.start()
    
me = singleton.SingleInstance()

##################### –ö–û–ù–ï–¶ –†–ê–°–ü–ò–°–ê–ù–ò–Ø ########################

def confirm():
	connection.commit()

def set_type(id, ctype):
	st = "UPDATE wb_clothes set type = %s WHERE id = %s"
	vals = [ctype, id]
	db.execute(st, vals)
	confirm()

def set_thing(id, cthing):
	st = "UPDATE wb_clothes set thing = %s WHERE id = %s"
	vals = [cthing, id]
	db.execute(st, vals)
	confirm()

def get_clothes_info(id):
	st = "SELECT * FROM wb_clothes WHERE id = %s"
	vals = [id]
	db.execute(st, vals)
	res = db.fetchall()[0]
	return (res[1], res[2], res[3], res[4])

def remove_clothes(id):
	st = "DELETE FROM wb_clothes WHERE id = %s"
	vals = [id]
	db.execute(st, vals)
	confirm()


def set_screen(uuid, screen):
	st = "UPDATE wb_users SET screen = %s WHERE tg_id = %s"
	vals = [screen, uuid]
	db.execute(st, vals)
	confirm()

def generate_inline_keyboard(buttons):
	keyboard = types.InlineKeyboardMarkup()
	for item in buttons:
		temp_btn = types.InlineKeyboardButton(text = item['text'], callback_data = item['callback'])
		keyboard.add(temp_btn)
	return keyboard

def set_location(uuid, location):
	st = "UPDATE wb_users SET lat = %s, lon = %s, screen = 0 WHERE tg_id = %s"
	vals = [location['latitude'], location['longitude'], uuid]
	db.execute(st, vals)
	confirm()

	send_success(uuid)
def set_city(uuid, text):
	geo = geolocation(user_agent="wbot")
	tmp_location = geo.geocode(text)
	try:
		set_location(uuid, {
			'latitude': tmp_location.latitude,
			'longitude': tmp_location.longitude
		})
	except AttributeError:
		bot.send_message(uuid, f"–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùå", reply_markup = no_kb)
		set_screen(uuid, 1)

def save_new_name(uuid, name, c_id, msg_id):
	st = 'UPDATE wb_clothes SET name = %s WHERE id = %s'
	vals = [name, c_id]
	db.execute(st, vals)
	confirm()
	set_screen(uuid, 0)
	send_success(uuid)

def set_new_time(uuid, time):
	match = check_re(r'^(([01][0-9]|[012][0-3]):([0-5][0-9]))*$', time)
	if (match):
		set_screen(uuid, 0)
		st = 'UPDATE wb_schedule SET time = %s WHERE user = %s'
		vals = [time + ':00', uuid]
		db.execute(st, vals)
		confirm()

		send_success(uuid)
	else:
		msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)"
		bot.send_message(uuid, msg, reply_markup = no_kb)


@bot.message_handler(commands=['start'])
def start(message):
	uuid = message.chat.id

	st = "SELECT * FROM wb_users WHERE tg_id = %s"
	vals = [uuid]
	db.execute(st, vals)
	res = db.fetchall()
		

	if (res == []):
		bot.send_message(uuid, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup = no_kb)

		st = "INSERT INTO wb_users (tg_id, screen) VALUES (%s, %s)"
		db.execute(st, [uuid, 1])
		confirm()

		st = 'INSERT INTO wb_schedule (user) VALUES (%s)'
		db.execute(st, [uuid])
		confirm()
	
	else:
		send_weather(uuid)
@bot.message_handler(content_types=['location'])
def location(message):
	uuid = message.chat.id
	if check_active(uuid):
		if (get_screen(uuid) == 1):
			set_location(uuid, {
				'latitude': message.location.latitude,
				'longitude': message.location.longitude
			})
@bot.message_handler(commands=['deactivate'])
def deactivate(message):
	uuid = message.chat.id


	st = "UPDATE `wb_users` SET `active` = false, `screen` = 0 WHERE `tg_id` = %s"
	vals = [uuid]
	db.execute(st, vals)
	confirm()

	res = db.fetchall()

	send_success(uuid)
@bot.message_handler(commands=['activate'])
def activate(message):
	uuid = message.chat.id

	st = "UPDATE `wb_users` SET `active` = true, `screen` = 0 WHERE `tg_id` = %s"
	vals = [uuid]
	db.execute(st, vals)
	confirm()

	res = db.fetchall()

	send_success(uuid)
@bot.message_handler(commands=['setlocation'])
def setlocation(message):
	uuid = message.chat.id
	if check_active(uuid):
		st = "UPDATE wb_users SET screen = 1 WHERE tg_id = %s"
		vals = [uuid]
		db.execute(st, vals)
		confirm()

		bot.send_message(uuid, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup = no_kb)

@bot.message_handler(commands=['my_clothes'])
def my_clothes(message):
	uuid = message.chat.id
	if check_active(uuid):
		st = "SELECT id, name, type, thing FROM wb_clothes WHERE user = %s"

		vals = [uuid]
		db.execute(st, vals)
		msg = "<u><b>–í–∞—à–∞ –æ–¥–µ–∂–¥–∞:</b></u>\n\n"
		for item in db.fetchall():
			if (item[2] == None or item[3] == None):
				# remove_clothes(item[0])
				pass
			else:
				c_name = item[1]
				c_description = get_clothes_description(item[2], item[3])
				c_type = c_description[0]
				c_thing = c_description[1]
				
				msg += f"‚Äì {c_name}, —Ç–∏–ø: {c_type}, –≤–∏–¥: {c_thing}\n"

		bot.send_message(uuid, msg, parse_mode = 'html', reply_markup = main_kb)


@bot.message_handler(commands=['edit_clothes'])
def edit_clothes(message, offset = 0, edit = False, msg_id = -1):
	uuid = message.chat.id
	if check_active(uuid):
		st = "SELECT COUNT(id) FROM wb_clothes WHERE user = %s"
		vals = [uuid]
		

		db.execute(st, vals)
		quantity = int(db.fetchall()[0][0])

		page = math.ceil(offset / 5)
		if ((offset % 5) == 0):
			page += 1
		c_page = math.ceil(quantity / 5)

		st = "SELECT id, name FROM wb_clothes WHERE user = %s AND type IS NOT NULL AND thing IS NOT NULL LIMIT %s, 5"

		vals = [uuid, offset]
		db.execute(st, vals)

		buttons = []

		for c_id, c_name in db.fetchall():
			buttons.append({'text': c_name, 'callback': '{"func":"edit","id":' + str(c_id) + ',"o":' + str(offset) + '}'})
		keyboard = generate_inline_keyboard(buttons)

		if (page == 1 and c_page == 1):
			pass
		elif (page == 1):
			keyboard.add(types.InlineKeyboardButton(text = '‚û°Ô∏è', callback_data = '{"func":"np","o":' + str(offset) + '}'))
		elif (page == c_page):
			keyboard.add(types.InlineKeyboardButton(text = '‚¨ÖÔ∏è', callback_data = '{"func":"pp","o":' + str(offset) + '}'))
		else:
			keyboard.row(
				types.InlineKeyboardButton(text = '‚¨ÖÔ∏è', callback_data = '{"func":"pp","o":' + str(offset) + '}'),
				types.InlineKeyboardButton(text = '‚û°Ô∏è', callback_data = '{"func":"np","o":' + str(offset) + '}')
			)
		

		msg = f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {c_page}'

		if (edit):
			bot.edit_message_text(chat_id = uuid, message_id = msg_id, text = msg, reply_markup = keyboard, parse_mode = 'html')
		else:
			bot.send_message(uuid, msg, parse_mode = 'html', reply_markup = keyboard)


@bot.message_handler(commands=['schedule'])
def schedule(message, edit = False):
	uuid = message.chat.id
	if check_active(uuid):
		days_of_week = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

		st = 'SELECT mon, tue, wed, thu, fri, sat, sun, time FROM wb_schedule WHERE user = %s'
		vals = [uuid]
		db.execute(st, vals)
		days_res = []
		db_res = db.fetchall()[0]
		schedule_time = db_res[7]

		if (schedule_time == None):
			msg = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. \n\n<i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–¥–µ–∂–¥—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±—É–¥–Ω–∏ –≤ 8:00.</i>'
		else:
			for num, day in enumerate(db_res[:7]):
				if (day == 1):
					days_res.append(days_of_week[num])

			if (days_res == []):
				days_res.append('–¥–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã,')


			msg = f'<u><b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b></u> \n{ ", ".join(days_res) } –≤ { str(schedule_time)[:-3] }'

		buttons = (
			{'text': '–ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ ‚úèÔ∏è', 'callback': '{"func":"edit_days"}'},
			{'text': '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞', 'callback': '{"func":"edit_time"}'},
			{'text': '–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚ùå', 'callback': '{"func":"delete_time"}'},
		)

		keyboard = generate_inline_keyboard(buttons)

		if (edit):
			bot.edit_message_text(chat_id = uuid, message_id = message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')
		else:
			bot.send_message(uuid, msg, parse_mode = 'html', reply_markup = keyboard)


@bot.message_handler(commands=['add_clothes'])
def add_clothes(message):
	uuid = message.chat.id
	if check_active(uuid):
		text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏"
		set_screen(uuid, 2)
		bot.send_message(uuid, text, reply_markup = no_kb)

def choose_type(uuid, name, edit=False, msg_id=-1, thing_id=-1):
	if check_active(uuid):
		set_screen(uuid, 0)
		if (edit):
			pass
		else:
			st = "INSERT INTO wb_clothes (user, name) VALUES (%s, %s)"
			vals = [uuid, name]
			db.execute(st, vals)
			confirm()
			st = "SELECT LAST_INSERT_ID()"
			db.execute(st)
			thing_id = db.fetchall()[0][0]

		msg = f"–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∏ –≤–∏–¥ –æ–¥–µ–∂–¥—ã.\n\n<u><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></u> {name}\n–¢–∏–ø:"
		buttons = (
			{'text': '–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä', 'callback': '{"func":"headdress","id":' + str(thing_id) + '}'},
			{'text': '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞', 'callback': '{"func":"outerwear","id":' + str(thing_id) + '}'},
			{'text': '–®—Ç–∞–Ω—ã', 'callback': '{"func":"pants","id":' + str(thing_id) + '}'},
			{'text': '–û–±—É–≤—å', 'callback': '{"func":"shoes","id":' + str(thing_id) + '}'},
			{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"back_to_name","id":' + str(thing_id) + '}'},
		)

		keyboard = generate_inline_keyboard(buttons)

		if (edit):
			bot.edit_message_text(chat_id = uuid, message_id = msg_id, text = msg, reply_markup = keyboard, parse_mode = 'html')
		else:
			bot.send_message(uuid, msg, reply_markup = keyboard, parse_mode = 'html')

@bot.callback_query_handler(func = lambda call: True)
def answer(call):
	uuid = call.message.chat.id

	exceptions = ['np', 'pp', 'edit_days', 'edit_time', 'delete_time', 'delete_y', 'delete_n']

	if check_active(uuid):
		data = json.loads(call.data)
		if (data['func'] not in exceptions and data['func'][0] != '%'):
			clothes_data = get_clothes_info(data['id'])
			c_name = clothes_data[1]
			c_type = clothes_data[2]
			c_thing = clothes_data[3]

		if (data['func'] == 'headdress'):
			set_type(data['id'], 0)
			c_type = 0
			msg = f"–û—Ç–ª–∏—á–Ω–æ üëç\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∏ –≤–∏–¥ –æ–¥–µ–∂–¥—ã.\n\n<u><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></u> {c_name}\n<u><b>–¢–∏–ø:</b></u> –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä\n\n–í–∏–¥:"

			buttons = (
				{'text': '–¢—ë–ø–ª–∞—è —à–∞–ø–∫–∞', 'callback': '{"func":"addc01","id":' + str(data['id']) + '}'},
				{'text': '–ó–∏–º–Ω—è—è —à–∞–ø–∫–∞', 'callback': '{"func":"addc02","id":' + str(data['id']) + '}'},
				{'text': '–®–∞–ø–∫–∞', 'callback': '{"func":"addc03","id":' + str(data['id']) + '}'},
				{'text': '–®–∞–ø–∫–∞ (–º–æ–∂–Ω–æ –∏ –±–µ–∑ –Ω–µ—ë)', 'callback': '{"func":"addc04","id":' + str(data['id']) + '}'},
				{'text': '–ö–µ–ø–∫–∞', 'callback': '{"func":"addc05","id":' + str(data['id']) + '}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"thing_back","id":' + str(data['id']) + '}'},
			)
			
			keyboard = generate_inline_keyboard(buttons)

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')
		
		elif (data['func'] == 'outerwear'):
			set_type(data['id'], 2)
			c_type = 2
			msg = f"–û—Ç–ª–∏—á–Ω–æ üëç\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∏ –≤–∏–¥ –æ–¥–µ–∂–¥—ã.\n\n<u><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></u> {c_name}\n<u><b>–¢–∏–ø:</b></u> –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞\n\n–í–∏–¥:"

			buttons = (
				{'text': '–û—á–µ–Ω—å —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞', 'callback': '{"func":"addc20","id":' + str(data['id']) + '}'},
				{'text': '–ó–∏–º–Ω—è—è –∫—É—Ä–∫–∞', 'callback': '{"func":"addc21","id":' + str(data['id']) + '}'},
				{'text': '–í–µ—Ç—Ä–æ–≤–∫–∞', 'callback': '{"func":"addc22","id":' + str(data['id']) + '}'},
				{'text': '–í–µ—Ç—Ä–æ–≤–∫–∞ –∏–ª–∏ —Ö—É–¥–∏', 'callback': '{"func":"addc23","id":' + str(data['id']) + '}'},
				{'text': '–°–≤–∏—Ç–µ—Ä', 'callback': '{"func":"addc11","id":' + str(data['id']) + '}'},
				{'text': '–•—É–¥–∏', 'callback': '{"func":"addc24","id":' + str(data['id']) + '}'},
				{'text': '–§—É—Ç–±–æ–ª–∫–∞', 'callback': '{"func":"addc25","id":' + str(data['id']) + '}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"thing_back","id":' + str(data['id']) + '}'},
			)
			
			keyboard = generate_inline_keyboard(buttons)

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')

		elif (data['func'] == 'pants'):
			set_type(data['id'], 3)
			c_type = 3
			msg = f"–û—Ç–ª–∏—á–Ω–æ üëç\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∏ –≤–∏–¥ –æ–¥–µ–∂–¥—ã.\n\n<u><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></u> {c_name}\n<u><b>–¢–∏–ø:</b></u> –®—Ç–∞–Ω—ã\n\n–í–∏–¥:"

			buttons = (
				{'text': '–¢—ë–ø–ª—ã–µ —à—Ç–∞–Ω—ã', 'callback': '{"func":"addc30","id":' + str(data['id']) + '}'},
				{'text': '–î–∂–∏–Ω—Å—ã', 'callback': '{"func":"addc31","id":' + str(data['id']) + '}'},
				{'text': '–®–æ—Ä—Ç—ã', 'callback': '{"func":"addc32","id":' + str(data['id']) + '}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"thing_back","id":' + str(data['id']) + '}'},
			)
			
			keyboard = generate_inline_keyboard(buttons)

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')

		elif (data['func'] == 'shoes'):
			set_type(data['id'], 4)
			c_type = 4
			msg = f"–û—Ç–ª–∏—á–Ω–æ üëç\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∏ –≤–∏–¥ –æ–¥–µ–∂–¥—ã.\n\n<u><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b></u> {c_name}\n<u><b>–¢–∏–ø:</b></u> –û–±—É–≤—å\n\n–í–∏–¥:"

			buttons = (
				{'text': '–°–∞–ø–æ–≥–∏', 'callback': '{"func":"addc40","id":' + str(data['id']) + '}'},
				{'text': '–¢—ë–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏', 'callback': '{"func":"addc41","id":' + str(data['id']) + '}'},
				{'text': '–ë–æ—Ç–∏–Ω–∫–∏ –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏', 'callback': '{"func":"addc42","id":' + str(data['id']) + '}'},
				{'text': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', 'callback': '{"func":"addc43","id":' + str(data['id']) + '}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"thing_back","id":' + str(data['id']) + '}'},
			)
			
			keyboard = generate_inline_keyboard(buttons)

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')



		elif (data['func'][0:4] == 'addc'):
			c_type = data['func'][4]
			c_thing = data['func'][5]

			st = "UPDATE wb_clothes SET name = %s, type = %s, thing = %s WHERE id = %s"
			vals = [c_name, c_type, c_thing, data['id']]
			db.execute(st, vals)
			confirm()

			bot.send_message(chat_id = uuid, text = '–£—Å–ø–µ—à–Ω–æ ‚úÖ', reply_markup = main_kb)
			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)


		elif (data['func'] == 'np'):
			edit_clothes(call.message, int(data['o']) + 5, True, call.message.message_id)

		elif (data['func'] == 'pp'):
			edit_clothes(call.message, int(data['o']) - 5, True, call.message.message_id)

		elif (data['func'] == 'edit' or data['func'] == 'rmc_n'):
			buttons = (
				{'text': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ ‚úèÔ∏è', 'callback': '{"func":"edit_name","id":' + str(data['id']) + '}'},
				{'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø ‚úèÔ∏è', 'callback': '{"func":"edit_type","id":' + str(data['id']) + '}'},
				{'text': '–£–¥–∞–ª–∏—Ç—å ‚ùå', 'callback': '{"func":"remove","id":' + str(data['id']) + ',"o":' + str(data['o']) +'}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"edit_back","id":' + str(data['id']) + ',"o":' + str(data['o']) +'}'},
			)

			keyboard = generate_inline_keyboard(buttons)

			msg = f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º {c_name}'

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')

		elif (data['func'] == 'edit_back'):
			edit_clothes(call.message, int(data['o']), True, call.message.message_id)

		elif (data['func'] == 'edit_type'):
			choose_type(uuid, c_name, True, call.message.message_id, data['id'])

		elif (data['func'] == 'remove'):
			buttons = (
				{'text': '–î–∞', 'callback': '{"func":"rmc_y","id":' + str(data['id']) + '}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"rmc_n","id":' + str(data['id']) + ',"o":' + str(data['o']) +'}'},
			)
			keyboard = generate_inline_keyboard(buttons)
			msg = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {c_name}?'
			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')

		elif (data['func'] == 'rmc_y'):
			remove_clothes(data['id'])
			bot.send_message(chat_id = uuid, text = '–£—Å–ø–µ—à–Ω–æ ‚úÖ', reply_markup = main_kb)
			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)
		
		elif (data['func'] == 'edit_name'):
			uuid = call.message.chat.id
			msg = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏"
			new_screen = '9_' + str(data['id']) + '_' + str(call.message.message_id)
			set_screen(uuid, new_screen)

			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)
			bot.send_message(chat_id = uuid, text = msg, reply_markup = no_kb)

		elif (data['func'] == 'edit_days'):
			days_of_week = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

			st = 'SELECT mon, tue, wed, thu, fri, sat, sun FROM wb_schedule WHERE user = %s'
			vals = [uuid]
			db.execute(st, vals)
			days_res = []
			db_res = db.fetchall()[0]

			for num, day in enumerate(db_res):
				if (day == 1):
					days_res.append(days_of_week[num] + ' ‚úÖ')
				else:
					days_res.append(days_of_week[num])

			buttons = []

			for num, day in enumerate(days_res):
				buttons.append({'text': day, 'callback': '{"func":"%_' + str(num) +'"}'},)
			buttons.append({'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"%_b"}'},)


			keyboard = generate_inline_keyboard(buttons)

			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = call.message.text, reply_markup = keyboard)

		elif (data['func'][0] == '%'):
			action = data['func'][2:]
			if (action == 'b'):
				schedule(call.message, True)
			else:
				days_of_week = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
				st = 'SELECT ' + days_of_week[int(action)] + ' FROM wb_schedule WHERE user = %s'
				vals = [uuid]
				db.execute(st, vals)
				if (db.fetchall()[0][0] == 0):
					day_value = 1
				else:
					day_value = 0

				st = 'UPDATE wb_schedule SET ' + days_of_week[int(action)] + ' = %s WHERE user = %s'
				vals = [day_value, uuid]
				db.execute(st, vals)
				confirm()

				days_of_week = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

				st = 'SELECT mon, tue, wed, thu, fri, sat, sun, time FROM wb_schedule WHERE user = %s'
				vals = [uuid]
				db.execute(st, vals)
				days_res_btn = []
				days_res = []
				db_res = db.fetchall()[0]
				for num, day in enumerate(db_res[:7]):
					if (day == 1):
						days_res_btn.append(days_of_week[num] + ' ‚úÖ')
						days_res.append(days_of_week[num])
					else:
						days_res_btn.append(days_of_week[num])

				buttons = []

				for num, day in enumerate(days_res_btn):
					buttons.append({'text': day, 'callback': '{"func":"%_' + str(num) +'"}'},)
				buttons.append({'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"%_b"}'},)

				schedule_time = db_res[7]
				if (days_res == []):
					days_res.append('–¥–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã,')

				msg = f'<u><b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b></u> \n{ ", ".join(days_res) } –≤ { str(schedule_time)[:-3] }'

				keyboard = generate_inline_keyboard(buttons)

				bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')
		
		elif (data['func'] == 'edit_time'):
			set_screen(uuid, 6)

			msg = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)'

			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)
			bot.send_message(chat_id = uuid, text = msg, reply_markup = no_kb)

		elif (data['func'] == 'delete_time'):
			buttons = (
				{'text': '–î–∞', 'callback': '{"func":"delete_y"}'},
				{'text': '–ù–∞–∑–∞–¥ üîô', 'callback': '{"func":"delete_n"}'}
			)
			keyboard = generate_inline_keyboard(buttons)
			msg = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?'
			bot.edit_message_text(chat_id = uuid, message_id = call.message.message_id, text = msg, reply_markup = keyboard, parse_mode = 'html')

		elif (data['func'] == 'delete_n'):
			schedule(call.message, True)

		elif (data['func'] == 'delete_y'):
			st = 'UPDATE wb_schedule SET time = NULL, mon = 0, tue = 0, wed = 0, thu = 0, fri = 0, sat = 0, sun = 0 WHERE user = %s'
			db.execute(st, [uuid])
			confirm()

			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)
			send_success(uuid)

		elif (data['func'] == 'thing_back'):
			choose_type(uuid, c_name, True, call.message.message_id, data['id'])
		elif (data['func'] == 'back_to_name'):
			set_screen(data['id'], 2)
			add_clothes(call.message)
			bot.delete_message(chat_id = uuid, message_id = call.message.message_id)

@bot.message_handler(content_types=['text'])
def text(message):
	uuid = message.chat.id
	screen = get_screen(uuid)
	text = message.text
	if check_active(uuid):
		if (text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É'):
			add_clothes(message)
		elif (text == 'üëî –ß—Ç–æ –Ω–∞–¥–µ—Ç—å?'):
			send_weather(uuid)
		elif (text == 'üóÑÔ∏è –ú–æ—è –æ–¥–µ–∂–¥–∞'):
			my_clothes(message)
		elif (text == 'üè† –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'):
			setlocation(message)
		elif (text == '‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
			schedule(message)
		elif (text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–µ–∂–¥—É'):
			edit_clothes(message)
		else:
			if (isinstance(screen, int)):
				if (screen == 1):
					set_city(uuid, text)
				elif (screen == 2):
					choose_type(uuid, text)
				elif (screen == 6):
					set_new_time(uuid, text)
				else:
					send_idk(uuid)
			else:
				if (screen[0] == 9):
					save_new_name(uuid, text, screen[1], screen[2])
				else:
					send_idk(uuid)

bot.polling(none_stop=True)

def threadwrap(threadfunc):
    def wrapper():
        while True:
            try:
                threadfunc()
            except BaseException as e:
                th_name = threading.current_thread().name
                print(f'–ü–∞–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ {th_name}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
    return wrapper